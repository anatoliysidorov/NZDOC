DECLARE
  TYPE newIdByModelID IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

  storeNewIds newIdByModelID;
  v_Id        TBL_FOM_UIELEMENT.COL_ID%TYPE;
  v_ParentId  TBL_FOM_UIELEMENT.COL_PARENTID%TYPE;
  v_FormId    TBL_MDM_FORM.COL_ID%TYPE;
  v_xmlData   NCLOB;
  v_ExistRel  NUMBER;
  v_PathToXml CONSTANT VARCHAR2(15 CHAR) := '/xmlData/record' ;
  v_AutoGenerated INTEGER;
  v_AutoGeneratedBefore INTEGER;
  v_DESCRIPTION NCLOB;
  v_formRule  NCLOB;

  CURSOR cur_saveNewElement (p_XmlData NCLOB, p_Path NVARCHAR2) 
      IS 
  SELECT xt.*
    FROM XMLTABLE (p_Path PASSING XMLTYPE (p_XmlData)
          COLUMNS "ID" NUMBER PATH 'ID'
         ) xt
   WHERE xt."ID" < 0;

  CURSOR cur_XmlData (p_XmlData NCLOB, p_Path NVARCHAR2) 
      IS 
  SELECT xt.*
    FROM XMLTABLE (p_Path PASSING XMLTYPE (p_XmlData)
          COLUMNS 
           "ID"              NUMBER PATH 'ID',
           "JSONDATA"        CLOB   PATH 'JSONDATA',
           "RULEVISIBILITY"  NUMBER PATH 'RULEVISIBILITY',
           "REGIONID"        NUMBER PATH 'REGIONID',
           "PARENTID"        NUMBER PATH 'PARENTID',
           "POSITIONINDEX"   NUMBER PATH 'POSITIONINDEX',
           "SOMCONFIGID"     NUMBER PATH 'SOMCONFIGID',
           "DOMOBJECTID"     NUMBER PATH 'DOMOBJECTID',
           "ATTRIBUTES"      VARCHAR2(4000) PATH 'ATTRIBUTES'
         ) xt;

  FUNCTION getNewId (p_ModelId PLS_INTEGER)
    RETURN NUMBER 
        IS
  BEGIN
    IF (p_ModelId IS NULL) THEN
      RETURN NULL;
    END IF;
    RETURN storeNewIds (p_ModelId);
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
        RETURN p_ModelId;
  END getNewId;
  
BEGIN
  v_AutoGenerated := :AUTOGENERATED;
  v_FormId := NVL(:FormId, 0);  
  v_xmlData := :xmlData;
  :ErrorCode := 0;
  v_formRule := :xmlFormRule; 


  IF (v_FormId = 0) THEN
    :ErrorMessage := 'FormId can''t be empty';
    RETURN;
  END IF;

  IF (v_xmlData IS NULL OR DBMS_LOB.GETLENGTH(v_xmlData) = 0) THEN
    :ErrorMessage := 'XmlData can''t be empty';
    RETURN;
  END IF;

  IF (DBMS_LOB."INSTR"(lower(v_xmlData), '<xmldata>') = 0 
      OR
      DBMS_LOB."INSTR"(lower(v_xmlData), '</xmldata>') = 0)
  THEN
    :ErrorMessage := 'XmlData has wrong format';
    RETURN;
  END IF;

  SAVEPOINT startPoint;
  
  <<RemoveUIElements>>
  BEGIN
    IF (lower(v_xmlData) = '<xmldata></xmldata>') 
    THEN
      DELETE FROM TBL_UIELEMENT_DOM_ATTRIBUTE
       WHERE COL_FOM_UIELEMENT_ID IN (
         SELECT COL_ID
           FROM TBL_FOM_UIELEMENT tfu
          WHERE tfu.COL_UIELEMENTFORM = v_FormId
       );
       DELETE FROM TBL_FOM_UIELEMENT WHERE COL_UIELEMENTFORM = v_FormId;
    END IF;
  
    DELETE FROM TBL_UIELEMENT_DOM_ATTRIBUTE
     WHERE COL_FOM_UIELEMENT_ID IN (
       SELECT COL_ID
         FROM TBL_FOM_UIELEMENT tfu
        WHERE tfu.COL_UIELEMENTFORM = v_FormId 
          AND COL_ID NOT IN  (
                SELECT xt."ID"
                  FROM XMLTABLE(v_PathToXml PASSING XMLTYPE (v_xmlData)
                        COLUMNS "ID" NUMBER PATH 'ID') xt
                 WHERE xt."ID" > 0
              )
    );

    DELETE FROM TBL_FOM_UIELEMENT
     WHERE COL_UIELEMENTFORM = v_FormId 
       AND COL_ID NOT IN (
        SELECT xt."ID"
          FROM XMLTABLE(v_PathToXml PASSING XMLTYPE (v_xmlData)
                COLUMNS "ID" NUMBER PATH 'ID') xt
         WHERE xt."ID" > 0
      );
  EXCEPTION
    WHEN OTHERS THEN
      :ErrorMessage := '$t(Error during delete) ' || SQLERRM();
      :ErrorCode    := SQLCODE();
      ROLLBACK TO startPoint;
  END RemoveUIElements;
  
  <<CreateNewUIElement>>
  BEGIN 
    FOR rec_new_element IN cur_saveNewElement (v_xmlData, v_PathToXml)
    LOOP
      INSERT INTO TBL_FOM_UIELEMENT (
        COL_UIELEMENTFORM
      ) VALUES (
        v_FormId
      ) RETURNING COL_ID INTO v_Id;
      storeNewIds (rec_new_element."ID") := v_Id;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      :ErrorMessage := '$t(Error during added new UI Elements) ' || SQLERRM();
      :ErrorCode    := SQLCODE();
      ROLLBACK TO startPoint;
  END CreateNewUIElement;
  
  <<UpdateUIElementData>>
  BEGIN
    FOR rec_Xml IN cur_XmlData(v_xmlData, v_PathToXml)
    LOOP
      v_Id := getNewId (rec_Xml."ID");
      v_ParentId := getNewId (rec_Xml."PARENTID");
      UPDATE TBL_FOM_UIELEMENT SET
        COL_REGIONID = rec_Xml."REGIONID",
        COL_POSITIONINDEX = rec_Xml."POSITIONINDEX",
        COL_JSONDATA = rec_Xml."JSONDATA",
        COL_PARENTID = v_ParentId,
        COL_FOM_UIELEMENTSOM_CONFIG = rec_Xml."SOMCONFIGID",
        COL_UIELEMENTOBJECT = rec_Xml."DOMOBJECTID"
       WHERE COL_ID = v_Id
         AND COL_UIELEMENTFORM = v_FormId;
       
      MERGE INTO TBL_UIELEMENT_DOM_ATTRIBUTE t
	    USING (
	        SELECT v_Id AS ID, COLUMN_VALUE AS AttributeId
            FROM TABLE(ASF_SPLIT(rec_Xml."ATTRIBUTES", ','))
	    ) p
	    ON (t.COL_FOM_UIELEMENT_ID = p.ID AND t.COL_DOM_ATTRIBUTE_ID = p.AttributeId)
	    WHEN NOT MATCHED THEN
	        INSERT (t.COL_FOM_UIELEMENT_ID, t.COL_DOM_ATTRIBUTE_ID)
			    VALUES (p.ID, p.AttributeId);

      DELETE FROM TBL_UIELEMENT_DOM_ATTRIBUTE 
       WHERE COL_ID IN (
        SELECT t1.COL_ID
          FROM TBL_UIELEMENT_DOM_ATTRIBUTE t1
          LEFT JOIN (SELECT v_Id AS ID, COLUMN_VALUE AS AttributeId 
                     FROM TABLE(ASF_SPLIT(rec_Xml."ATTRIBUTES", ','))) t2
            ON t1.COL_FOM_UIELEMENT_ID = t2.ID AND t1.COL_DOM_ATTRIBUTE_ID = t2.AttributeId
      WHERE t1.COL_FOM_UIELEMENT_ID = v_Id AND (t2.ID IS NULL AND t2.AttributeId IS NULL));
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      :ErrorMessage := '$t(Error update UI Elements) ' || SQLERRM();
      :ErrorCode    := SQLCODE();
      ROLLBACK TO startPoint;
  END UpdateUIElementData;
  
  -- update a autogenerated flag in form table
  IF (v_FormId > 0) THEN
  	IF (NVL(v_AutoGenerated, 0) = 0) THEN
    	SELECT COL_AUTOGENERATED, COL_DESCRIPTION INTO v_AutoGeneratedBefore, v_DESCRIPTION FROM TBL_MDM_FORM WHERE COL_ID = v_FormId;

        IF NVL(v_AutoGeneratedBefore, 0) = 1 THEN
            v_DESCRIPTION := '';
        END IF;

        UPDATE TBL_MDM_FORM SET
            COL_AUTOGENERATED = 0,
            COL_DESCRIPTION = v_DESCRIPTION
        WHERE COL_ID = v_FormId AND (NVL(COL_AUTOGENERATED, 0) <> 0);
    END IF;


	UPDATE TBL_MDM_FORM SET
		COL_FORMRULE = v_formRule
	WHERE COL_ID = v_FormId;	
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    :ErrorMessage := '$t(Error in main block) ' || SQLERRM();
    :ErrorCode    := SQLCODE();
    ROLLBACK TO startPoint;
END;