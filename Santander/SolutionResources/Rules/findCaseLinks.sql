DECLARE 

    V_CASE_ID          INTEGER;
    V_FIND_INTO        VARCHAR2(255);
    V_FIND_ONLY_NOT_CLOSED INTEGER;
    V_LINK_TYPE_CODE   VARCHAR2(255);
    V_RELATED_CASE_IDS VARCHAR2(255);
    

    V_ERRORCODE        INTEGER;
    V_ERRORMESSAGE     VARCHAR2(255);

BEGIN

    V_CASE_ID          := :CASE_ID;
    V_FIND_INTO        := :FIND_INTO;
    V_FIND_ONLY_NOT_CLOSED := NVL(:FIND_ONLY_NOT_CLOSED,0);
    V_LINK_TYPE_CODE   := :LINK_TYPE_CODE;
    V_RELATED_CASE_IDS := '';

    V_ERRORCODE    := 0;
    V_ERRORMESSAGE := '';

    BEGIN
    
        IF UPPER(V_FIND_INTO)= 'PARENT' THEN --GET PARENT OF THIS CASE
            
            SELECT
                --LINK_TYPE_CODE,  
                LISTAGG(CASE WHEN PARENT_CASE = 0 THEN NULL ELSE PARENT_CASE END, ', ') WITHIN GROUP (ORDER BY CASE WHEN PARENT_CASE = 0 THEN NULL ELSE PARENT_CASE END) INTO  V_RELATED_CASE_IDS--AS PARENT_CASES
            FROM
                (SELECT 
                        LT.COL_CODE AS LINK_TYPE_CODE,
                        CSE_LINK.COL_CASELINKPARENTCASE AS PARENT_CASE
                FROM
                TBL_DICT_LINKTYPE LT 
                LEFT JOIN TBL_CASELINK CSE_LINK ON CSE_LINK.COL_CASELINKDICT_LINKTYPE = LT.COL_ID 
                LEFT JOIN TBL_CASE CSE ON CSE_LINK.COL_CASELINKPARENTCASE = CSE.COL_ID
                LEFT JOIN TBL_DICT_CASESTATE CSE_STATE ON CSE.COL_CASEDICT_CASESTATE = CSE_STATE.COL_ID  
                    
                WHERE LT.COL_CODE = V_LINK_TYPE_CODE
                  AND CSE_LINK.COL_CASELINKCHILDCASE = V_CASE_ID
                  AND (V_FIND_ONLY_NOT_CLOSED = 0 OR NVL(CSE_STATE.COL_ISFINISH, 0) = 0)
                GROUP BY LT.COL_CODE, CSE_LINK.COL_CASELINKPARENTCASE)
            GROUP BY LINK_TYPE_CODE;

        ELSIF UPPER(V_FIND_INTO)= 'CHILD' THEN --GET CHILD OF THIS CASE  

            SELECT 
                --LINK_TYPE_CODE,  
                LISTAGG(CASE WHEN CHILD_CASE = 0 THEN NULL ELSE CHILD_CASE END, ', ') WITHIN GROUP (ORDER BY CASE WHEN CHILD_CASE = 0 THEN NULL ELSE CHILD_CASE END) INTO V_RELATED_CASE_IDS --AS CHILD_CASES
            FROM
                (SELECT 
                        LT.COL_CODE AS LINK_TYPE_CODE,
                        CSE_LINK.COL_CASELINKCHILDCASE AS CHILD_CASE
                FROM
                TBL_DICT_LINKTYPE LT 
                LEFT JOIN TBL_CASELINK CSE_LINK ON CSE_LINK.COL_CASELINKDICT_LINKTYPE = LT.COL_ID 
                LEFT JOIN TBL_CASE CSE ON CSE_LINK.COL_CASELINKCHILDCASE = CSE.COL_ID
                LEFT JOIN TBL_DICT_CASESTATE CSE_STATE ON CSE.COL_CASEDICT_CASESTATE = CSE_STATE.COL_ID  
               
                WHERE LT.COL_CODE = V_LINK_TYPE_CODE
                  AND  CSE_LINK.COL_CASELINKPARENTCASE = V_CASE_ID
                  AND (V_FIND_ONLY_NOT_CLOSED = 0 OR NVL(CSE_STATE.COL_ISFINISH, 0) = 0)
                GROUP BY LT.COL_CODE, CSE_LINK.COL_CASELINKCHILDCASE)
            GROUP BY LINK_TYPE_CODE;

        END IF;

    EXCEPTION WHEN NO_DATA_FOUND THEN      

        V_RELATED_CASE_IDS := 'NOT_FOUND';
        V_ERRORMESSAGE     := '';
        V_ERRORCODE        := 0;

    WHEN OTHERS THEN

        V_RELATED_CASE_IDS := '';
        V_ERRORMESSAGE     := DBMS_UTILITY.FORMAT_ERROR_STACK;
        V_ERRORCODE        := 110;
    
    END;

    <<OUTPUT>>

        DBMS_OUTPUT.PUT_LINE(V_RELATED_CASE_IDS);

        :ERRORCODE        := V_ERRORCODE;
        :ERRORMESSAGE     := V_ERRORMESSAGE;
        :RELATED_CASE_IDS := V_RELATED_CASE_IDS;
END;