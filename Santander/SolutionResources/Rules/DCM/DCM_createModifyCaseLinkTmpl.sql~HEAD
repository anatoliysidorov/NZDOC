DECLARE

    V_ID           TBL_CASELINKTMPL.COL_ID%TYPE;
    V_NAME         TBL_CASELINKTMPL.COL_NAME%TYPE;
    V_CODE         TBL_CASELINKTMPL.COL_CODE%TYPE;
    V_CANCREATECHILDFROMPARENT  TBL_CASELINKTMPL.COL_CANCREATECHILDFROMPARENT%TYPE;
    V_CANCREATEPARENTFROMCHILD  TBL_CASELINKTMPL.COL_CANCREATEPARENTFROMCHILD%TYPE;
    V_CANLINKCHILDTOPARENT      TBL_CASELINKTMPL.COL_CANLINKCHILDTOPARENT%TYPE;
    V_CANLINKPARENTTOCHILD      TBL_CASELINKTMPL.COL_CANLINKPARENTTOCHILD%TYPE;
    V_CASELINKTMPLCHILDCASETYPE TBL_CASELINKTMPL.COL_CASELINKTMPLCHILDCASETYPE%TYPE;
    V_CASELINKTMPLPRNTCASETYPE  TBL_CASELINKTMPL.COL_CASELINKTMPLPRNTCASETYPE%TYPE;
    V_CASELINKTMPLLINKTYPE      TBL_CASELINKTMPL.COL_CASELINKTMPLLINKTYPE%TYPE;
    V_CASELINKTMPLLINKDIRECTION TBL_CASELINKTMPL.COL_CASELINKTMPLLINKDIRECTION%TYPE;

    --STANDARD      
    V_ERRORCODE        NUMBER := 0;
    V_ERRORMESSAGE     NVARCHAR2(255 CHAR) := '';
    V_ISID             NUMBER;
    V_RESULT           NUMBER;

BEGIN

    V_ID           := :ID;
    V_NAME         := :NAME;
    V_CODE         := :CODE;
    V_CANCREATECHILDFROMPARENT  := NVL(:CANCREATECHILDFROMPARENT,1);
    V_CANCREATEPARENTFROMCHILD  := NVL(:CANCREATEPARENTFROMCHILD,1);
    V_CANLINKCHILDTOPARENT      := NVL(:CANLINKCHILDTOPARENT,1);
    V_CANLINKPARENTTOCHILD      := NVL(:CANLINKPARENTTOCHILD,1);
    V_CASELINKTMPLCHILDCASETYPE := :CHILD_ID;
    V_CASELINKTMPLPRNTCASETYPE  := :PARENT_ID;
    V_CASELINKTMPLLINKTYPE      := :LT_ID;
    V_CASELINKTMPLLINKDIRECTION := :LD_ID;


    IF NVL(V_CASELINKTMPLCHILDCASETYPE, 0) > 0 THEN
        V_ISID := F_UTIL_GETID(ERRORCODE    => V_ERRORCODE,
                                ERRORMESSAGE => V_ERRORMESSAGE,
                                ID           => V_CASELINKTMPLCHILDCASETYPE,
                                TABLENAME    => 'TBL_DICT_CASESYSTYPE');
        IF V_ERRORCODE > 0 THEN
            GOTO CLEANUP;
        END IF;
    END IF;

    IF NVL(V_CASELINKTMPLPRNTCASETYPE, 0) > 0 THEN
        V_ISID := F_UTIL_GETID(ERRORCODE    => V_ERRORCODE,
                                ERRORMESSAGE => V_ERRORMESSAGE,
                                ID           => V_CASELINKTMPLPRNTCASETYPE,
                                TABLENAME    => 'TBL_DICT_CASESYSTYPE');
        IF V_ERRORCODE > 0 THEN
            GOTO CLEANUP;
        END IF;
    END IF;

    IF NVL(V_CASELINKTMPLLINKTYPE, 0) > 0 THEN
        V_ISID := F_UTIL_GETID(ERRORCODE    => V_ERRORCODE,
                                ERRORMESSAGE => V_ERRORMESSAGE,
                                ID           => V_CASELINKTMPLLINKTYPE,
                                TABLENAME    => 'TBL_DICT_LINKTYPE');
        IF V_ERRORCODE > 0 THEN
            GOTO CLEANUP;
        END IF;
    END IF;

    IF NVL(V_CASELINKTMPLLINKDIRECTION, 0) > 0 THEN
        V_ISID := F_UTIL_GETID(ERRORCODE    => V_ERRORCODE,
                                ERRORMESSAGE => V_ERRORMESSAGE,
                                ID           => V_CASELINKTMPLLINKDIRECTION,
                                TABLENAME    => 'TBL_DICT_LINKDIRECTION');
        IF V_ERRORCODE > 0 THEN
            GOTO CLEANUP;
        END IF;
    END IF;

    BEGIN

            IF (V_ID IS NULL) THEN

                INSERT INTO TBL_CASELINKTMPL
                (COL_ID,
                COL_NAME,
                COL_CODE,
                COL_CANCREATECHILDFROMPARENT,
                COL_CANCREATEPARENTFROMCHILD,
                COL_CANLINKCHILDTOPARENT,
                COL_CANLINKPARENTTOCHILD,
                COL_CASELINKTMPLCHILDCASETYPE,
                COL_CASELINKTMPLPRNTCASETYPE,
                COL_CASELINKTMPLLINKTYPE,
                COL_CASELINKTMPLLINKDIRECTION)
                VALUES
                (V_ID,
                V_NAME,
                V_CODE,
                V_CANCREATECHILDFROMPARENT,
                V_CANCREATEPARENTFROMCHILD,
                V_CANLINKCHILDTOPARENT,
                V_CANLINKPARENTTOCHILD,
                V_CASELINKTMPLCHILDCASETYPE,
                V_CASELINKTMPLPRNTCASETYPE,
                V_CASELINKTMPLLINKTYPE,
                V_CASELINKTMPLLINKDIRECTION)
                RETURNING COL_ID INTO V_ID;

                :SUCCESSRESPONSE := 'Created link with name {{MESS_NAME}}';
                  
            ELSE

                UPDATE TBL_CASELINKTMPL SET
                COL_NAME = V_NAME,
                COL_CANCREATECHILDFROMPARENT  = V_CANCREATECHILDFROMPARENT,
                COL_CANCREATEPARENTFROMCHILD  = V_CANCREATEPARENTFROMCHILD,
                COL_CANLINKCHILDTOPARENT      = V_CANLINKCHILDTOPARENT,
                COL_CANLINKPARENTTOCHILD      = V_CANLINKPARENTTOCHILD,
                COL_CASELINKTMPLCHILDCASETYPE = V_CASELINKTMPLCHILDCASETYPE,
                COL_CASELINKTMPLPRNTCASETYPE  = V_CASELINKTMPLPRNTCASETYPE,
                COL_CASELINKTMPLLINKTYPE      = V_CASELINKTMPLLINKTYPE,
                COL_CASELINKTMPLLINKDIRECTION = V_CASELINKTMPLLINKDIRECTION
                WHERE COL_ID = V_ID;
                :SUCCESSRESPONSE := 'Modified link with name {{MESS_NAME}} ';
             
            END IF;

            V_RESULT := LOC_I18N(
                MESSAGETEXT => :SUCCESSRESPONSE,
                MESSAGERESULT => :SUCCESSRESPONSE,
                MESSAGEPARAMS => NES_TABLE(KEY_VALUE('MESS_NAME', V_NAME))
            );
            :RECORDID := V_ID;

    EXCEPTION 
        WHEN DUP_VAL_ON_INDEX THEN
            :AFFECTEDROWS    := 0;
            V_ERRORCODE      := 101;
            V_RESULT := LOC_I18N(
            MESSAGETEXT => 'There already exists a link with the code {{MESS_CODE}}',
            MESSAGERESULT => V_ERRORMESSAGE,
            MESSAGEPARAMS => NES_TABLE(KEY_VALUE('MESS_CODE', V_CODE))
            );
            :SUCCESSRESPONSE := '';
        WHEN OTHERS THEN
            :AFFECTEDROWS    := 0;
            V_ERRORCODE      := 102;
            V_ERRORMESSAGE   := '$T(EXCEPTION:) ' || SUBSTR(SQLERRM, 1, 200);
            :SUCCESSRESPONSE := '';

    END;

    <<CLEANUP>>
        :ERRORCODE    := V_ERRORCODE;
        :ERRORMESSAGE := V_ERRORMESSAGE;
END;
